'javac -g -sourcepath src -d bin src/*.java\n\nimport benchexec.tools.template\nimport benchexec.util as util\n\n\nclass Tool(benchexec.tools.template.BaseTool):\n    """This calls javac and checks that a task consisting of Java files compiles."""\n\n    def executable(self):\n        return util.find_executable("javac")\n\n    def name(self):\n        return "javac"\n\n    def version(self, executable):\n        return self._version_from_tool(\n            executable, arg="-version", use_stderr=True\n        ).replace("javac ", "")\n\n    def cmdline(self, executable, options, tasks, propertyfile, rlimits):\n        return (\n            [executable]\n            + options\n            + [file for file in util.get_files(tasks) if file.endswith(".java")]\n        )\n\n/bin/false task1.xml task2.xml\n\nimport benchexec.tools.template\nimport benchexec.result as result\n\n\nclass Tool(benchexec.tools.template.BaseTool):\n    """\n    This tool is an imaginary tool that returns always UNSAFE.\n    To use it you need a normal benchmark-xml-file\n    with the tool and tasks, however options are ignored.\n    """\n\n    def executable(self):\n        return "/bin/false"\n\n    def name(self):\n        return "AlwaysFalseReach"\n\n    def cmdline(self, executable, options, tasks, propertyfile, rlimits):\n        return [executable] + tasks\n\n    def determine_result(self, returncode, returnsignal, output, isTimeout):\n        return result.RESULT_FALSE_REACH\n\n\n./tabol.sh -v -o output/ task1.xml task2.xml\n\nimport benchexec.result as result\nimport benchexec.util as util\nimport benchexec.tools.template\n\n\nclass Tool(benchexec.tools.template.BaseTool):\n    REQUIRED_PATHS = ["tabol.sh", "tabol.jar", "output/", "tools"]\n\n    def executable(self):\n        return util.find_executable("tabol.sh")\n\n    def name(self):\n        return "TABOL"\n\n    def cmdline(self, executable, options, tasks, propertyfile, rlimits):\n        return [executable] + options + tasks\n\n    def version(self, executable):\n        return self._version_from_tool(executable)\n\n    def determine_result(self, returncode, returnsignal, output, isTimeout):\n        status = result.RESULT_UNKNOWN\n\n        if isTimeout:\n            status = result.RESULT_UNKNOWN\n        elif "TABOL_TRUE" in output:\n            status = result.RESULT_TRUE_PROP\n        elif "TABOL_FALSE" in output:\n            status = result.RESULT_FALSE_TERMINATION\n        else:\n            status = result.RESULT_UNKNOWN\n\n        return status\n        \n cbmc --xml-ui task.c\n'