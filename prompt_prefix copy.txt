javac -g -sourcepath src -d bin src/*.java

import benchexec.tools.template
import benchexec.util as util


class Tool(benchexec.tools.template.BaseTool):
    """This calls javac and checks that a task consisting of Java files compiles."""

    def executable(self):
        return util.find_executable("javac")

    def name(self):
        return "javac"

    def version(self, executable):
        return self._version_from_tool(
            executable, arg="-version", use_stderr=True
        ).replace("javac ", "")

    def cmdline(self, executable, options, tasks, propertyfile, rlimits):
        return (
            [executable]
            + options
            + [file for file in util.get_files(tasks) if file.endswith(".java")]
        )

/bin/false task1.xml task2.xml

import benchexec.tools.template
import benchexec.result as result


class Tool(benchexec.tools.template.BaseTool):
    """
    This tool is an imaginary tool that returns always UNSAFE.
    To use it you need a normal benchmark-xml-file
    with the tool and tasks, however options are ignored.
    """

    def executable(self):
        return "/bin/false"

    def name(self):
        return "AlwaysFalseReach"

    def cmdline(self, executable, options, tasks, propertyfile, rlimits):
        return [executable] + tasks

    def determine_result(self, returncode, returnsignal, output, isTimeout):
        return result.RESULT_FALSE_REACH


./tabol.sh -v -o output/ task1.xml task2.xml

import benchexec.result as result
import benchexec.util as util
import benchexec.tools.template


class Tool(benchexec.tools.template.BaseTool):
    REQUIRED_PATHS = ["tabol.sh", "tabol.jar", "output/", "tools"]

    def executable(self):
        return util.find_executable("tabol.sh")

    def name(self):
        return "TABOL"

    def cmdline(self, executable, options, tasks, propertyfile, rlimits):
        return [executable] + options + tasks

    def version(self, executable):
        return self._version_from_tool(executable)

    def determine_result(self, returncode, returnsignal, output, isTimeout):
        status = result.RESULT_UNKNOWN

        if isTimeout:
            status = result.RESULT_UNKNOWN
        elif "TABOL_TRUE" in output:
            status = result.RESULT_TRUE_PROP
        elif "TABOL_FALSE" in output:
            status = result.RESULT_FALSE_TERMINATION
        else:
            status = result.RESULT_UNKNOWN

        return status
        